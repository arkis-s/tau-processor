2C00 // 0 mov e, 0
2D04 // 1 mov f, 4
0200 // 2 load contents of address {e, f} into {g, h} -> expecting {BE,EF}
0100 // 3 hlt
BEEF // 4 data


//2801 // mov a, 1
//3001 // cmp a, 1
//0100 // hlt



//287E // 0 mov a, 254
//2901 // 1 mov b, 1
//0b01 // 2 add a, b
//1900 // 3 js
//0007 // 4
//1A00 // 5 jns
//0002 // 6
//0100 // 7 hlt


//28FD // 0 mov a, 253
//2901 // 1 mov b, 1
//0b01 // 2 add a, b
//1700 // 3 jc 
//0007 // 4
//1800 // 5 jnc 
//0002 // 6
//0100 // 7 hlt

//28FE // 0 mov a, 254
//2901 // 1 mov b, 1
//0b01 // 2 add a, b
//1700 // 3 jc 000B
//000B // 4 
//1800 // 5 jnc 0002
//0002 // 6
//0000 // 7 nop
//0000 // 8 nop
//0000 // 9 nop
//0000 // A nop
//0100 // B halt

//28FF // 0
//2901 // 1
//0b01 // 2
//1800 // 3
//0009 // 4
//0000 // 5
//0000 // 6
//0000 // 7
//0000 // 8
//0100 // 9

//28FE // 0 mov a,
//2901 // 1 mov b,
//0B01 // 2 add a, b
//1400 // 3 jc
//0003 // 4
//0000 // 5 nop
//1800 // 6 jnc
//0002 // 7
//0100 // 8 halt

//2801 // 0 mov a, 1
//2901 // 1 mov b, 1
//0b01 // 2 add a, b
//1400 // 3 jmp 
//0006 // 4 addr
//28FF // 5 mov a, 255
//0100 // 6 hlt

//2801 // mov a, 1
//2902 // mov b, 2
//0901 // shl a, b -> a = 4
//0A01 // shr a, b -> a = 1
//2A00 // mov c, 0
//0B21 // add c, b -> 2 + 0 = 2
//
//// generate overflow flag
//28FF // mov a, 255
//2901 // mov b, 1
//0b01 // add a, b
//0c00 // adc a, a
//
//// zero registers
//1200 // xor a, a
//1211 // xor b, b
//0100 // hlt
//1222 // xor c, c
//
//28FE // mov a, 254
//1300 // not a


//28FF // mov a, FF
//29FA // mov b, FA
//0710 // cmp a, b
//0801 // test a, b
//0000 // nop
//2ACE // mov c, CE
//0632 // mov d, c

//28FF
//29FA
//0801
//0000