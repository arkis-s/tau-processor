import sys, re

def gen_lut():
    line_contents = gen_verilog(extract_hex(sys.argv[1]), sys.argv[2])

    with open(f"{sys.argv[2]}.sv", "w") as f:
        for line in line_contents:
            f.write(line)

        print(f"Generated file '{sys.argv[2]}.sv'")



def extract_hex(filename):
    # # comment regex: \/\/.*
    # # hex regex: ^[0-9|A-Fa-f]{4}     ^(?!\/\/*)[0-9|A-Fa-f]{4}        (?:[0-9|A-Fa-f]{4})           ^(?!:\/\/)(?:[0-9|A-Fa-f]{4})

    # --------------------------------------------------
    # bad and hacky regex because i can't figure out how to completely ignore comments
    # this will match comments & hex values at the same time, but most importantly it'll capture comments correctly
    line_regex = re.compile("(?:\/\/.*)|(?:[0-9|A-Fa-f]{4})")

    with open(filename) as f:
        contents = f.read()

    regexed_contents = line_regex.findall(contents)
    hex_vals = []

    for line in regexed_contents:
        if (len(line) == 4):
            hex_vals.append(line)

    # debug
    # print(hex_vals)

    return hex_vals


def gen_verilog(entry_list, module_name):

    file_contents = []

    # generic verilog intro etc
    file_contents.append(f"/* AUTOGENERATED BY SCRIPT. DO NOT MODIFY CONTENTS. */\n")
    file_contents.append(f"module {module_name} # (\n\tparameter WIDTH = 16\n) (\n\tinput wire [WIDTH-1:0] index,\n\toutput logic [WIDTH-1:0] lut_val\n);")
    file_contents.append(f"\n\talways_comb begin\n\t\tcase (index)")

    for i in range(len(entry_list)-1):
        #print(i)
        file_contents.append(f"\n\t\t\t16'd{i}: lut_val <= 16'h{entry_list[i]};")

    file_contents.append("\n\t\t\tdefault: lut_val <= 16'h0000;")

    file_contents.append("\n\t\tendcase\n\tend\nendmodule")

    #debug
    # for line in file_contents:
    #     print(line)

    return file_contents


if __name__ == '__main__':
    
    # debug
    # print(f"got args: {None if len(sys.argv) == 1 else sys.argv[1:]}")

    if (len(sys.argv) == 2 and sys.argv[1] == "help"):
        print("Usage: opcode_lut_gen.py [source file] [module name]")
        exit()
    elif (len(sys.argv) != 3):
        print("Not enough arguments supplied. Expected source file name and module name.")
        print(f"Got {sys.argv[1:]} instead")
        exit()

    gen_lut()